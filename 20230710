9조

박준수 - 팀장, INFP, https://velog.io/@subak, 수박 한통 혼자 하루만에 먹습니다.

박용석 - 팀원, ISFJ, https://velog.io/@ys4897, 게임을 좋아하는데 한 번 하면 멈출 수 가 없어서 아예 안하고 있다.

남경화 - 팀원, INFJ, https://velog.io/@wack, 하루에 커피를 마시지 않으면 죽는병에 걸렸습니다.

박준범 - 팀원, ESTP, https://velog.io/@rheo191710, 의지만 있으면 해낼수있다

이상훈 - 팀원, ISTJ, https://velog.io/@sanghoon_2, 실패는 성공의 어머니다.

S.A. 내용

팀

팀명 - 안경개발자

팀 소개 - 컴퓨터 앞에 너무 오래 앉아 있어 결국 모든 팀원이 안경을 쓰게 되었다.

프로젝트

프로젝트명 - 안경개발자의 첫번째 원정

프로젝트 소개 - 첫 번째 원정을 떠나는 스파르타 안경개발자들 소개 프로젝트

7월 10일 : S.A. 작성, 개발방향 결정

7월 11일 : 메인 페이지, 서브 페이지 제작

7월 12일 : 메인 페이지, 서브 페이지 제작

7월 13일 : 메인 페이지, 서브 페이지 제작

7월 14일 : 메인 페이지, 서브 페이지 제작

팀원 소개 페이지 1 - 박 준수님

팀원 소개 페이지 2 - 박 용석님

팀원 소개 페이지 3 - 남 경화님

팀원 소개 페이지 4 - 박 준범님

팀원 소개 페이지 5 - 이 상훈님

1. 개발자는 Git과 Github을 도대체 왜 사용하는가?

Git이란?

어려운 개발 말고 일상 생활 예시를 살펴보자.

- 레포트, 과제 등을 제출할 때 깔끔하게 딱 하나의 파일을 만들었나?
- 막상 제출할 때가 되니 수정할 것들이 보이고, 수정하다 망치면 안되니 백업본 만들어 놓으신 적 있나? 

그런데 위와 같은 방법의 문제점?!

1. 저장해야 할 파일이 많아지고 지저분해진다.
2. 각 파일마다 어떤 변경점이 있는지 명확히 확인이 안된다. 
- 그래서 개발자 중에 코드를 잘 관리할 수 있는 프로그램을 하나 만들었다.
    - 리눅스 토발즈 
        - 리눅스 운영체제 개발자
        - git 프로그램도 무료 배포자.

코드의 변경점을 기록하기 위해 git을 사용한다.  

1. 기능을 개발하면서 코드 변경점을 “기록”할 수 있습니다. 
2. 문제가 생겼을 때 특정 지점으로 되돌아 가는 것이 쉽습니다. 

⇒ 이러한 특징 때문에 git을 버전 관리 도구라고 한다.

Github이란?

일상 생활 예시를 들어봅시다.

- 여러분의 레포트를 저장한 컴퓨터가 고장이 났다.
    
    ⇒ 다시 레포트 만들어야 한다.
    
- 이런 상황을 방지(백업)하기 위해 드라이브, 클라우드 등을 사용하기도 한다.
- 드라이브에 파일을 저장하면 함께 일하는 팀원에게도 쉽게 공유 가능하다.
- github도 마찬가지로 온라인 코드 저장소이다.

### github 사용의 장점

1. 내 코드를 **온라인 저장소에 백업**을 할 수 있습니다.
2. 팀원들과 협업할 때 내 **코드를 공유**할 수 있습니다.
3. **함께 작업이 가능**합니다


### Quiz : Git과 Github은 왜 사용할까요?

1. git: 버전 관리 도구
    - 코드 변경점 기록
2. github: 온라인 저장소 
    - 내 코드를 온라인에 백업하거나 다른 사람과 협업하는 도구


# 알아야할 Git 명령어 리스트

Git은 **코드를 기록하는 것**이라고 했습니다. (**버전 관리**)

코드 기록을 위해 여러분은 **Git의 명령어를 알아야 합니다.** 

여러분이 알아야 할 명령어들은 다음과 같습니다. 

(물론 명령어는 정말 많지만 이 정도만 알면 협업에 큰 문제는 없습니다)

1. `git init`
2. `git add <파일명>`  혹은 `git add .`
3. `git commit -m "기능 개발과 관련된 기록"`
4. `git log`
5. `git status`
6. `git branch`
7. `git switch <브랜치명>` 혹은 `git checkout <브랜치명>`
8. `git merge`
9. `git stash`

### (필수) git 으로 코드 관리를 시작하자!! `git init`

**init** 은 **initialize**(초기화하다, 초기 설정하다)의 준말입니다. 

즉, **프로그래밍을 git으로 관리**하기 위해 **딱 한 번만 입력하면 되는 명령어**입니다. 

### (필수) git을 이용해서 코드 변경을 저장하자!! git add 와 git commit 

- `git add` 는 저장할 파일을 지정하는 것
- `git commit` 은 실제로 저장하는 것

### (필수) 내가 저장한 커밋 내역을 보고 싶다. git log

### (필수) 원본 파일을 변경하지 않고, 새로운 곳에 코드를 짜고 싶다! git branch & git switch 혹은 git checkout

### (필수) 다른 브랜치에서 만든 코드를 원본에 합치고 싶어요! git merge 

### 코드 저장은 No! 하지만 코드를 임시 저장하고 싶어요! git stash

### 과거의 커밋으로 되돌아가려면? git reset & git revert

### vim 아주 간단하게 알아보기

- **vim**이란?
    - 그냥 텍스트 편집기입니다.
    - 하지만 우리가 일반적으로 텍스트를 작성하는 방법과는 다릅니다.
    - vim 사용법은 추후에 찾아보시고, 오늘은 꼭 필요한 vim 사용법만 알아보겠습니다.
- **vim**을 갑자기 왜 배우나요?
    - `git commit` 시 `-m` 옵션을 사용하지 않으면 **vim 텍스트 편집기**가 열립니다.
    - github에서 발생하는 몇몇 상황들에서 마주칠 수 있습니다. (**conflict** 혹은 **git pull** 할 때)
    - 이때 **당황하지 않도록 하기 위함**입니다.

